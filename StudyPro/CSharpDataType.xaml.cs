using Microsoft.Maui.Controls;

namespace StudyPro;

public partial class CSharpDataType : ContentPage
{
	public CSharpDataType()
	{
		InitializeComponent();
        TextWebView();
        OneAnswerWebView();
        TwoAnswerWebView();
        ThreeAnswerWebView();
    }
    private void TextWebView()
    {
        string html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <style>
            body {
                font-size: 16px;
                text-align: justify;
                padding: 10px;
                color:#ACACAC;
            }
        </style>
        </head>
        <body>
            <p>Литералы</p>
            <p>Литералы представляют неизменяемые значения (иногда их еще называют константами). Литералы можно передавать переменным в качестве значения. Литералы бывают логическими, целочисленными, вещественными, символьными и строчными. И отдельный литерал представляет ключевое слово null.</p>
            <ul>
                <li>Логические литералы:<br>Есть две логических константы - true (истина) и false (ложь) </li>
                <li>Целочисленные литералы: <br>Целочисленные литералы представляют положительные и отрицательные целые числа, например, 1, 2, 3, 4, -7, -109. Целочисленные литералы могут быть выражены в десятичной, шестнадцатеричной и двоичной форме.<br>
                Числа в двоичной форме предваряются символами 0b, после которых идет набор из нулей и единиц.<br>Для записи числа в шестнадцатеричной форме применяются символы 0x, после которых идет набор символов от 0 до 9 и от A до F, которые собственно представляют число</li>
                <li>Вещественные литералы:<br>Вещественные литералы представляют дробные числа. Этот тип литералов имеет две формы. Первая форма - вещественные числа с фиксированной запятой, при которой дробную часть отделяется от целой части точкой.<br>
                Также вещественные литералы могут определяться в экспоненциальной форме MEp, где M — мантисса, E - экспонента, которая фактически означает ""*10^"" (умножить на десять в степени), а p — порядок.</li>
                <li>Символьные литералы:<br>Символьные литералы представляют одиночные символы. Символы заключаются в одинарные кавычки.
                Символьные литералы бывают нескольких видов. Прежде всего это обычные символы.<br>Специальную группу представляют управляющие последовательности Управляющая последовательность представляет символ, перед которым ставится слеш. И данная последовательность интерпретируется определенным образом. Наиболее часто используемые последовательности:<br>'\n' - перевод строки<br>
                '\t' - табуляция<br>'\\' - слеш<br>И если компилятор встретит в тексте последовательность \t, то он будет воспринимать эту последовательность не как слеш и букву t, а как табуляцию - то есть длинный отступ.<br>
                Также символы могут определяться в виде шестнадцатеричных кодов, также заключенный в одинарные кавычки.<br>
                Еще один способ определения символов представляет использования шестнадцатеричных кодов ASCII. Для этого в одинарных кавычках указываются символы '\x', после которых идет шестнадцатеричный код символа из таблицы ASCII.</li>
                <li>Строковые литералы:<br>Строковые литералы представляют строки. Строки заключаются в двойные кавычки.<br>Если внутри строки необходимо вывести двойную кавычку, то такая внутренняя кавычка предваряется обратным слешем.<br>Также в строках можно использовать управляющие последовательности. Например, последовательность '\n' осуществляет перевод на новую строку</li>
                <li>null:<br>null представляет ссылку, которая не указывает ни на какой объект. То есть по сути отсутствие значения.</li>
            </ul>
            <p>Типы данных</p>
            <ul>
                <li>bool: хранит значение true или false (логические литералы). Представлен системным типом System.Boolean</li>
                <li>byte: хранит целое число от 0 до 255 и занимает 1 байт. Представлен системным типом System.Byte</li>
                <li>sbyte: хранит целое число от -128 до 127 и занимает 1 байт. Представлен системным типом System.SByte</li>
                <li>short: хранит целое число от -32768 до 32767 и занимает 2 байта. Представлен системным типом System.Int16</li>
                <li>ushort: хранит целое число от 0 до 65535 и занимает 2 байта. Представлен системным типом System.UInt16</li>
                <li>int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. Представлен системным типом System.Int32. Все целочисленные литералы по умолчанию представляют значения типа int</li>
                <li>uint: хранит целое число от 0 до 4294967295 и занимает 4 байта. Представлен системным типом System.UInt32</li>
                <li>long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт. Представлен системным типом System.Int64</li>
                <li>ulong: хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт. Представлен системным типом System.UInt64</li>
                <li>float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта. Представлен системным типом System.Single</li>
                <li>double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта. Представлен системным типом System.Double</li>
                <li>decimal: хранит десятичное дробное число. Если употребляется без десятичной запятой, имеет значение от ±1.0*10-28 до ±7.9228*1028, может хранить 28 знаков после запятой и занимает 16 байт. Представлен системным типом System.Decimal</li>
                <li>char: хранит одиночный символ в кодировке Unicode и занимает 2 байта. Представлен системным типом System.Char. Этому типу соответствуют символьные литералы</li>
                <li>string: хранит набор символов Unicode. Представлен системным типом System.String. Этому типу соответствуют строковые литералы.</li>
                <li>object: может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе. Представлен системным типом System.Object, который является базовым для всех других типов и классов .NET.</li>
            </ul>
                <p>Использование суффиксов</p>
                <p>При присвоении значений надо иметь в виду следующую тонкость: все вещественные литералы (дробные числа) рассматриваются как значения типа double. И чтобы указать, что дробное число представляет тип float или тип decimal, необходимо к литералу добавлять суффикс: F/f - для float и M/m - для decimal.<br>Подобным образом все целочисленные литералы рассматриваются как значения типа int. Чтобы явным образом указать, что целочисленный литерал представляет значение типа uint, надо использовать суффикс U/u, для типа long - суффикс L/l, а для типа ulong - суффикс UL/ul</p>
                <p>Использование системных типов</p>
                <p>Выше при перечислении всех базовых типов данных для каждого упоминался системный тип. Потому что название встроенного типа по сути представляет собой сокращенное обозначение системного типа.</p>
                <p>Неявная типизация</p>
                <p>Для неявной типизации вместо названия типа данных используется ключевое слово var. Затем уже при компиляции компилятор сам выводит тип данных исходя из присвоенного значения. Так как по умолчанию
                все целочисленные значения рассматриваются как значения типа int, то поэтому в итоге переменная c будет иметь тип int. Аналогично переменной hello присваивается строка, поэтому эта переменная будет иметь тип string<br>Эти переменные подобны обычным, однако они имеют некоторые ограничения.Во-первых, мы не можем сначала объявить неявно типизируемую переменную, а затем инициализировать<br>Во-вторых, мы не можем указать в качестве значения неявно типизируемой переменной null</p>
        </body>
        </html>";

        textWebView.Source = new HtmlWebViewSource
        {
            Html = html
        };
    }
    private async void OnOpenCSarpCliked(object sender, EventArgs e)
    {
        if (one + two + three == 3)
        {
            var cSharp = new CSharp();
            await Navigation.PushAsync(cSharp);
            Navigation.RemovePage(this);
            GlobalState.LabelCSharp.Text = "30%";
            GlobalState.RestartButtonThree.BackgroundColor = Color.FromRgb(172, 153, 234);
        }
        else
            await DisplayAlert("Не доступно", "Есть не правильно решенные задания", "ок");
    }
    private void OneAnswerWebView()
    {
        string html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <style>
            body {
                font-size: 16px;
                text-align: justify;
                padding: 10px;
                color:#ACACAC;
            }
        </style>
        </head>
        <body>
            <p>Какой тип данных языка C# будет представлять следующая переменная?<br>bool enabled = true;</p>
        </body>
        </html>";

        oneAnswerWebView.Source = new HtmlWebViewSource
        {
            Html = html
        };
    }
    int one = 0;
    private void OneAnswerButton(object sender, EventArgs e)
    {
        if (oneAnswerEntry.Text == "Bool")
        {
            oneErrorLabel.Text = "Верно!";
            oneErrorLabel.TextColor = Colors.Green;
            ++one;
        }
        else if (oneAnswerEntry.Text == "bool")
        {
            oneErrorLabel.Text = "Верно!";
            oneErrorLabel.TextColor = Colors.Green;
            ++one;
        }
        else
        {
            oneErrorLabel.Text = "Не верно!";
            oneErrorLabel.TextColor = Colors.Red;
        }
    }
    private void TwoAnswerWebView()
    {
        string html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <style>
            body {
                font-size: 16px;
                text-align: justify;
                padding: 10px;
                color:#ACACAC;
            }
        </style>
        </head>
        <body>

            <p>Какой тип данных языка C# будет представлять следующая переменная?<br>var weight = 84.45f;</p>
        </body>
        </html>";

        twoAnswerWebView.Source = new HtmlWebViewSource
        {
            Html = html
        };
    }
    int two = 0;
    private void TwoAnswerButton(object sender, EventArgs e)
    {
        if (twoAnswerEntry.Text == "Float")
        {
            twoErrorLabel.Text = "Верно!";
            twoErrorLabel.TextColor = Colors.Green;
            ++two;
        }
        else if (twoAnswerEntry.Text == "float")
        {
            twoErrorLabel.Text = "Верно!";
            twoErrorLabel.TextColor = Colors.Green;
            ++two;
        }
        else
        {
            twoErrorLabel.Text = "Не верно!";
            twoErrorLabel.TextColor = Colors.Red;
        }
    }
    private void ThreeAnswerWebView()
    {
        string html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <style>
            body {
                font-size: 16px;
                text-align: justify;
                padding: 10px;
                color:#ACACAC;
            }
        </style>
        </head>
        <body>
            <p>Сколько байт занимает значение типа uint?<br>Укажите только число.</p>
        </body>
        </html>";

        threeAnswerWebView.Source = new HtmlWebViewSource
        {
            Html = html
        };
    }
    int three = 0;
    private void ThreeAnswerButton(object sender, EventArgs e)
    {
        if (threeAnswerEntry.Text == "4")
        {
            threeErrorLabel.Text = "Верно!";
            threeErrorLabel.TextColor = Colors.Green;
            ++three;
        }
        else
        {
            threeErrorLabel.Text = "Не верно!";
            threeErrorLabel.TextColor = Colors.Red;
        }
    }
}